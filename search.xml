<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>注解RabbitListener与RabbitHandler及消息序列化MessageConvert</title>
      <link href="/2022/05/05/rabbitlistener-yu-rabbithandler-ji-xiao-xi-xu-lie-hua/"/>
      <url>/2022/05/05/rabbitlistener-yu-rabbithandler-ji-xiao-xi-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="RabbitListener与-RabbitHandler及消息序列化MessageConvert"><a href="#RabbitListener与-RabbitHandler及消息序列化MessageConvert" class="headerlink" title="@RabbitListener与@RabbitHandler及消息序列化MessageConvert"></a>@RabbitListener与@RabbitHandler及消息序列化MessageConvert</h2><ul><li>  涉及网络传输的应用序列化不可避免，发送端以某种规则将消息转成 byte 数组进行发送，接收端则以约定的规则进行 byte[] 数组的解析</li><li>  RabbitMQ 的序列化是指 Message 的 body 属性，即我们真正需要传输的内容，<strong>RabbitMQ 抽象出一个 MessageConvert 接口处理消息的序列化</strong>，其实现有 SimpleMessageConverter（默认）、Jackson2JsonMessageConverter 等</li><li>  当调用了 convertAndSend 方法时会使用 MessageConvert 进行消息的序列化</li><li>  <strong>SimpleMessageConverter 对于要发送的消息体 body 为 byte[] 时不进行处理，如果是 String 则转成字节数组,如果是 Java 对象，则使用 jdk 序列化将消息转成字节数组，转出来的结果较大，含class类名，类相应方法等信息。因此性能较差</strong></li><li>  当使用 RabbitMQ 作为中间件时，数据量比较大，此时就要考虑使用类似 Jackson2JsonMessageConverter 等序列化形式以此提高性能</li></ul><h2 id="RabbitListener用法"><a href="#RabbitListener用法" class="headerlink" title="@RabbitListener用法"></a>@RabbitListener用法</h2><ul><li>  使用 @RabbitListener 注解标记方法，当监听到队列 debug 中有消息时则会进行接收并处理</li></ul><pre class="line-numbers language-none"><code class="language-none">@RabbitListener(queues &#x3D; &quot;debug&quot;)public void processMessage1(Message bytes) &#123;    System.out.println(new String(bytes));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>消息处理方法参数是由 MessageConverter 转化，若使用自定义 MessageConverter 则需要在 RabbitListenerContainerFactory 实例中去设置（默认 Spring 使用的实现是 SimpleRabbitListenerContainerFactory）</li><li>消息的 content_type 属性表示消息 body 数据以什么数据格式存储，接收消息除了使用 Message 对象接收消息（包含消息属性等信息）之外，还可直接使用对应类型接收消息 body 内容，但若方法参数类型不正确会抛异常：<ul><li>  <strong>application/octet-stream</strong>：二进制字节数组存储，使用 byte[]</li><li>  <strong>application/x-java-serialized-object</strong>：java 对象序列化格式存储，使用 Object、相应类型（反序列化时类型应该同包同名，否者会抛出找不到类异常）</li><li>  <strong>text/plain</strong>：文本数据类型存储，使用 String</li><li>  <strong>application/json</strong>：JSON 格式，使用 Object、相应类型</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9434708-77b9d3222ae376cd.png"></p><p>ZiVg2.png</p><h2 id="Payload-与-Headers"><a href="#Payload-与-Headers" class="headerlink" title="@Payload 与 @Headers"></a>@Payload 与 @Headers</h2><ul><li>  使用 @Payload 和 @Headers 注解可以消息中的 body 与 headers 信息</li></ul><pre class="line-numbers language-none"><code class="language-none">@RabbitListener(queues &#x3D; &quot;debug&quot;)public void processMessage1(@Payload String body, @Headers Map&lt;String,Object&gt; headers) &#123;    System.out.println(&quot;body：&quot;+body);    System.out.println(&quot;Headers：&quot;+headers);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  也可以获取单个 Header 属性</li></ul><pre class="line-numbers language-none"><code class="language-none">@RabbitListener(queues &#x3D; &quot;debug&quot;)public void processMessage1(@Payload String body, @Header String token) &#123;    System.out.println(&quot;body：&quot;+body);    System.out.println(&quot;token：&quot;+token);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过-RabbitListener-注解声明-Binding"><a href="#通过-RabbitListener-注解声明-Binding" class="headerlink" title="通过 @RabbitListener 注解声明 Binding"></a>通过 @RabbitListener 注解声明 Binding</h3><ul><li>  通过 @RabbitListener 的 bindings 属性声明 Binding（若 RabbitMQ 中不存在该绑定所需要的 Queue、Exchange、RouteKey 则自动创建，若存在则抛出异常）</li></ul><pre class="line-numbers language-none"><code class="language-none">@RabbitListener(bindings &#x3D; @QueueBinding(        exchange &#x3D; @Exchange(value &#x3D; &quot;topic.exchange&quot;,durable &#x3D; &quot;true&quot;,type &#x3D; &quot;topic&quot;),        value &#x3D; @Queue(value &#x3D; &quot;consumer_queue&quot;,durable &#x3D; &quot;true&quot;),        key &#x3D; &quot;key.#&quot;))public void processMessage1(Message message) &#123;    System.out.println(message);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RabbitListener-和-RabbitHandler-搭配使用"><a href="#RabbitListener-和-RabbitHandler-搭配使用" class="headerlink" title="@RabbitListener 和 @RabbitHandler 搭配使用"></a>@RabbitListener 和 @RabbitHandler 搭配使用</h2><ul><li>  @RabbitListener 可以标注在类上面，需配合 @RabbitHandler 注解一起使用</li><li>  @RabbitListener 标注在类上面表示当有收到消息的时候，就交给 @RabbitHandler 的方法处理，具体使用哪个方法处理，根据 MessageConverter 转换后的参数类型</li></ul><pre class="line-numbers language-none"><code class="language-none">@Component@RabbitListener(queues &#x3D; &quot;consumer_queue&quot;)public class Receiver &#123;    @RabbitHandler    public void processMessage1(String message) &#123;        System.out.println(message);    &#125;    @RabbitHandler    public void processMessage2(byte[] message) &#123;        System.out.println(new String(message));    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Message-内容对象序列化与反序列化"><a href="#Message-内容对象序列化与反序列化" class="headerlink" title="Message 内容对象序列化与反序列化"></a>Message 内容对象序列化与反序列化</h2><h3 id="使用-Java-序列化与反序列化"><a href="#使用-Java-序列化与反序列化" class="headerlink" title="使用 Java 序列化与反序列化"></a>使用 Java 序列化与反序列化</h3><ul><li>  默认的 SimpleMessageConverter 在发送消息时会将对象序列化成字节数组，若要反序列化对象，需要自定义 MessageConverter</li></ul><pre class="line-numbers language-none"><code class="language-none">@Configurationpublic class RabbitMQConfig &#123;    @Bean    public RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory)&#123;        SimpleRabbitListenerContainerFactory factory &#x3D; new SimpleRabbitListenerContainerFactory();        factory.setConnectionFactory(connectionFactory);        factory.setMessageConverter(new MessageConverter() &#123;            @Override            public Message toMessage(Object object, MessageProperties messageProperties) throws MessageConversionException &#123;                return null;            &#125;            @Override            public Object fromMessage(Message message) throws MessageConversionException &#123;                try(ObjectInputStream ois &#x3D; new ObjectInputStream(new ByteArrayInputStream(message.getBody())))&#123;                    return (User)ois.readObject();                &#125;catch (Exception e)&#123;                    e.printStackTrace();                    return null;                &#125;            &#125;        &#125;);        return factory;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@Component@RabbitListener(queues &#x3D; &quot;consumer_queue&quot;)public class Receiver &#123;    @RabbitHandler    public void processMessage1(User user) &#123;        System.out.println(user.getName());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-JSON-序列化与反序列化"><a href="#使用-JSON-序列化与反序列化" class="headerlink" title="使用 JSON 序列化与反序列化"></a>使用 JSON 序列化与反序列化</h3><ul><li>  RabbitMQ 提供了 Jackson2JsonMessageConverter 来支持消息内容 JSON 序列化与反序列化</li><li>  消息发送者在发送消息时应设置 MessageConverter 为 Jackson2JsonMessageConverter</li></ul><pre class="line-numbers language-none"><code class="language-none">rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  发送消息</li></ul><pre class="line-numbers language-none"><code class="language-none">User user &#x3D; new User(&quot;linyuan&quot;);rabbitTemplate.convertAndSend(&quot;topic.exchange&quot;,&quot;key.1&quot;,user);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>  消息消费者也应配置 MessageConverter 为 Jackson2JsonMessageConverter</li></ul><pre class="line-numbers language-none"><code class="language-none">@Configurationpublic class RabbitMQConfig &#123;        @Bean    public RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory)&#123;        SimpleRabbitListenerContainerFactory factory &#x3D; new SimpleRabbitListenerContainerFactory();        factory.setConnectionFactory(connectionFactory);        factory.setMessageConverter(new Jackson2JsonMessageConverter());        return factory;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  消费消息</li></ul><pre class="line-numbers language-none"><code class="language-none">@Component@RabbitListener(queues &#x3D; &quot;consumer_queue&quot;)public class Receiver &#123;    @RabbitHandler    public void processMessage1(@Payload User user) &#123;        System.out.println(user.getName());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  <strong>注意</strong>：被序列化对象应提供一个无参的构造函数，否则会抛出异常</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/2022/03/16/kua-yu-wen-ti/"/>
      <url>/2022/03/16/kua-yu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>前端调用后端提供的 API 来获取数据，很多都是前后端分离的架构</p><p>前端调用的后端接口不属于同一个域（域名或端口不同），就会产生跨域问题，也就是说你的应用访问了该应用域名或端口之外的域名或端口。</p><p>跨域是指跨域名的访问，以下情况都属于跨域：</p><table><thead><tr><th align="left">跨域原因说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">域名不同</td><td align="left"><a href="http://www.jd.com/">www.jd.com</a> 与 <a href="http://www.taobao.com/">www.taobao.com</a></td></tr><tr><td align="left">域名相同，端口不同</td><td align="left"><a href="http://www.jd.com:8080/">www.jd.com:8080</a> 与 <a href="http://www.jd.com:8081/">www.jd.com:8081</a></td></tr><tr><td align="left">二级域名不同</td><td align="left">item.jd.com 与 miaosha.jd.com</td></tr></tbody></table><h3 id="为什么有跨域问题？"><a href="#为什么有跨域问题？" class="headerlink" title="为什么有跨域问题？"></a>为什么有跨域问题？</h3><p>跨域不一定会有跨域问题。因为跨域问题是浏览器对于ajax请求的一种安全限制：<strong>一个页面发起的ajax请求，只能是于当前页同域名的路径</strong>，这能有效的阻止跨站攻击。</p><p>因此：<strong>跨域问题 是针对ajax的一种限制，也是浏览防止攻击的一种方式</strong>。</p><p>但是这却给我们的开发带来了不变，而且在实际生成环境中，肯定会有很多台服务器之间交互，地址和端口都可能不同，怎么办</p><h2 id="后端的解决办法"><a href="#后端的解决办法" class="headerlink" title="后端的解决办法"></a>后端的解决办法</h2><h3 id="细粒度的解决"><a href="#细粒度的解决" class="headerlink" title="细粒度的解决"></a>细粒度的解决</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*origins： 允许可访问的域列表maxAge:准备响应前的缓存持续的最大时间（以秒为单位）。放在controller或者方法上，也可以两个同时放并且设置不同的注解值*/</span><span class="token comment">//@CrossOrigin(origins = "http://domain2.com",maxAge = 69)//解决跨域-为整个controller</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">"http://domain2.com"</span><span class="token punctuation">,</span>maxAge <span class="token operator">=</span> <span class="token number">69</span><span class="token punctuation">)</span><span class="token comment">//解决跨域</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><h4 id="CorsFilter"><a href="#CorsFilter" class="headerlink" title="CorsFilter"></a>CorsFilter</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">CorsConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">CorsFilter</span><span class="token punctuation">;</span><span class="token comment">//全局配置解决跨域</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Corsconfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许哪些域</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许哪些请求字段</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许哪些请求方法</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span>corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WebMvcConfigurer"><a href="#WebMvcConfigurer" class="headerlink" title="WebMvcConfigurer"></a>WebMvcConfigurer</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CorsRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Webmvc</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"PUT"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//是否允许携带cookie</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多少秒内浏览器可以不询问</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>琴谱</title>
      <link href="/2022/02/27/qin-pu/"/>
      <url>/2022/02/27/qin-pu/</url>
      
        <content type="html"><![CDATA[<h1 id="请回答1988"><a href="#请回答1988" class="headerlink" title="请回答1988"></a>请回答1988</h1><p>中括号高音，小括号低音</p><p>12133345<br>55567【1】7653<br>（5）5321<br>2345652<br>12133345<br>55567【1】7653<br>（5）5321<br>2345655</p><p>345 【21】777【1】7<br>656【1】65<br>321 1 331<br>2112 35535</p><p>345 【21】777【1】7<br>656【1】65<br>321 1 331<br>2112 35535</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVAEE笔记</title>
      <link href="/2022/01/20/javaee-bi-ji/"/>
      <url>/2022/01/20/javaee-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>get里面只可以获取URL中的参数</p><p>post可以获取URL和body中的参数</p><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><h3 id="设置响应数据"><a href="#设置响应数据" class="headerlink" title="设置响应数据"></a>设置响应数据</h3><p>响应数据分为3个部分</p><p>1、响应行：<code>HTTP/1.1 200 OK</code></p><p><code>void setStatus(int sc)</code>:设置响应状态码</p><p>2、响应头：<code>Content-Type：text/html</code></p><p><code>void setHeader(String name,String value)</code>:设置响应头键值对</p><p>3、响应体：如图片，html信息等</p><p><code>PrintWriter getWriter():</code>获取字符输出流</p><p><code>ServletOutputStream getOutputStream()</code>:获取字节输出流</p><h3 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h3><p>特点</p><ol><li>浏览器地址变化 </li><li>可以重定向到任意位置的资源（外部内部都可） </li><li>是两次请求，不能在多个资源之间使用Request共享数据</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;        &#x2F;&#x2F;1. 设置状态码&#x2F;&#x2F;        response.setStatus(302);&#x2F;&#x2F;        &#x2F;&#x2F;2.设置响应头&#x2F;&#x2F;        response.setHeader(&quot;location&quot;,&quot;&#x2F;demo2&quot;);        &#x2F;&#x2F;重定向的简写方式        response.sendRedirect(&quot;&#x2F;demo2&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h3><p>什么时候路径需要加虚拟目录？</p><p>浏览器使用–&gt;加虚拟目录</p><p>服务端使用–&gt;不加虚拟目录</p><p>加虚拟目录时建议使用<code>request.getContextPath()</code></p><p>如</p><p>加虚拟目录</p><p>《a herf=》</p><p>《form action=》</p><p>response.sendRedierct(“”)</p><p>不加虚拟目录</p><p>request.getRequestDispatcher(“”)</p><h3 id="响应字符数据"><a href="#响应字符数据" class="headerlink" title="响应字符数据"></a>响应字符数据</h3><h3 id="响应字节数据"><a href="#响应字节数据" class="headerlink" title="响应字节数据"></a>响应字节数据</h3><h2 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h2><p>会话：</p><p>用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。</p><p>一次会话中可以包含｛%  color red 多次 %｝请求和响应。</p><p>6次请求，3个会话</p><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gyiryiunanj30pf0gwtei.jpg"></p><p>会话跟踪:一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在 同一次会话的<strong>多次请求间共享数据</strong>。</p><p>为什么无法在浏览器和服务器不支持数据共享呢?</p><ol><li>浏览器和服务器之间使用的是HTTP请求来进行数据传输</li><li>HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求 </li><li>HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响 </li><li>请求与请求之间独立后，就无法实现多次请求之间的数据共享</li></ol><p>会话跟踪技术的具体实现方式：</p><p>客户端：Cookie</p><p>服务端：Session</p><p>Cookie是存储在浏览器端而Session是存储在服务器端</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><h3 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h3><h3 id="钝化和活化"><a href="#钝化和活化" class="headerlink" title="钝化和活化"></a>钝化和活化</h3><p>钝化：在服务器正常关闭后，Tomcat会自动将Session数据写入硬盘的文件中</p><p>活化：再次启动服务器后，从文件中加载数据到Session</p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><h3 id="路径说明"><a href="#路径说明" class="headerlink" title="路径说明"></a>路径说明</h3><ul><li>拦截具体资源：/index.jsp—&gt;只有访问index.jsp时才会拦截</li><li>目录拦截：/user/*—&gt;访问/user下的所有资源，都会被拦截</li><li>后缀名拦截：*.jsp—&gt;访问后缀为jsp的资源都会被拦截</li><li>拦截所有：/*—&gt;访问所有的资源都会被拦截</li></ul><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><p>监听器可以在application、session和request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件</p><p> <img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gyjy0xf55fj30zq0ck7c9.jpg"></p><h3 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3><p>定义类，实现接口</p><p>添加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Listener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span><span class="token punctuation">,</span> <span class="token class-name">HttpSessionListener</span><span class="token punctuation">,</span> <span class="token class-name">HttpSessionAttributeListener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* This method is called when the servlet context is initialized(when the Web application is deployed). */</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* This method is called when the servlet Context is undeployed or Application Server shuts down. */</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* Session is created. */</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* Session is destroyed. */</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> sbe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* This method is called when an attribute is added to a session. */</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> sbe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* This method is called when an attribute is removed from a session. */</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> sbe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* This method is called when an attribute is replaced in a session. */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax笔记</title>
      <link href="/2022/01/18/ajax/"/>
      <url>/2022/01/18/ajax/</url>
      
        <content type="html"><![CDATA[<p>   之前都是使用jsp来获取后端Servlet传输到前端的数据，但是jsp的缺点有很多，现在一般都不用jsp</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>AJAX</strong>即“<strong>Asynchronous JavaScript and XML</strong>”（异步的<a href="https://zh.wikipedia.org/wiki/JavaScript">JavaScript</a>与<a href="https://zh.wikipedia.org/wiki/XML">XML</a>技术），指的是一套综合了多项技术的<a href="https://zh.wikipedia.org/wiki/%E7%80%8F%E8%A6%BD%E5%99%A8">浏览器</a>端<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81">网页</a>开发技术。</p><p><strong>作用：</strong></p><ol><li>与服务器进行数据交换：通过AJAX可以给服务器发送请求，并获取服务器的响应数据(使用<strong>AJAX</strong>+<strong>HTML</strong>就可以替换JSP页面了)</li><li>异步交互：可以不重新加载整个页面的情况下，与服务器交换数据并更新部分的网页。像用户名校验、搜索联想等</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>编写一个Servlet，用response输出字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1`获取请求参数</span>      <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token comment">//2`判断是否存在，这里简化</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>         <span class="token comment">//3`输出结果</span>      response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>flag<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建XMLHttpRequest核心对象—&gt;用于和服务端交互</p><h3 id="XMLHttpRequest-对象方法"><a href="#XMLHttpRequest-对象方法" class="headerlink" title="XMLHttpRequest 对象方法"></a>XMLHttpRequest 对象方法</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">new XMLHttpRequest()</td><td align="left">创建新的 XMLHttpRequest 对象</td></tr><tr><td align="left">abort()</td><td align="left">取消当前请求</td></tr><tr><td align="left">getAllResponseHeaders()</td><td align="left">返回头部信息</td></tr><tr><td align="left">getResponseHeader()</td><td align="left">返回特定的头部信息</td></tr><tr><td align="left">open(<em>method</em>, <em>url</em>, <em>async</em>, <em>user</em>, <em>psw</em>)</td><td align="left">规定请求method：请求类型 GET 或 POSTurl：文件位置async：true（异步）或 false（同步）user：可选的用户名称psw：可选的密码</td></tr><tr><td align="left">send()</td><td align="left">将请求发送到服务器，用于 GET 请求</td></tr><tr><td align="left">send(<em>string</em>)</td><td align="left">将请求发送到服务器，用于 POST 请求</td></tr><tr><td align="left">setRequestHeader()</td><td align="left">向要发送的报头添加标签/值对</td></tr></tbody></table><h3 id="XMLHttpRequest-对象属性"><a href="#XMLHttpRequest-对象属性" class="headerlink" title="XMLHttpRequest 对象属性"></a>XMLHttpRequest 对象属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onreadystatechange</td><td>定义当 readyState 属性发生变化时被调用的函数</td></tr><tr><td>readyState</td><td>保存 XMLHttpRequest 的状态。<br />0：请求未初始化<br />1：服务器连接已建立<br />2：请求已收到<br />3：正在处理请求<br />4：请求已完成且响应已就绪</td></tr><tr><td>responseText</td><td>以字符串返回响应数据</td></tr><tr><td>responseXML</td><td>以 XML 数据返回响应数据</td></tr><tr><td>status</td><td>返回请求的状态号<br />200: “OK”<br />403: “Forbidden”<br />404: “Not Found”<br />如需完整列表请访问 <a href="https://www.w3school.com.cn/tags/ref_httpmessages.asp">Http 消息参考手册</a></td></tr><tr><td>statusText</td><td>返回状态文本（比如 “OK” 或 “Not Found”）</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1`创建核心对象</span><span class="token keyword">var</span> xhttp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// code for IE6, IE5</span>    xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发送请求</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">open(<em>method</em>, <em>url</em>, <em>async</em>)</td><td align="left">规定请求的类型<br /><em>method</em>：请求的类型：GET 还是 POST<br /><em>url</em>：服务器（文件）位置<br /><em>async</em>：true（异步）或 false（同步）</td></tr><tr><td align="left">send()</td><td align="left">向服务器发送请求（用于 GET）</td></tr><tr><td align="left">send(<em>string</em>)</td><td align="left">向服务器发送请求（用于 POST）</td></tr></tbody></table><h5 id="GET-还是-POST？"><a href="#GET-还是-POST？" class="headerlink" title="GET 还是 POST？"></a>GET 还是 POST？</h5><p>GET 比 POST 更简单更快，可用于大多数情况下。</p><p>不过，请在以下情况始终使用 POST：</p><ul><li>缓存文件不是选项（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 无大小限制）</li><li>发送用户输入（可包含未知字符），POST 比 GET 更强大更安全</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//2`向服务器发送请求</span>      xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost:8080/AJAX/demoServlet?username="</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>      xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取响应数据</p><h3 id="onreadystatechange-属性"><a href="#onreadystatechange-属性" class="headerlink" title="onreadystatechange 属性"></a>onreadystatechange 属性</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onreadystatechange</td><td align="left">定义了当 readyState 属性发生改变时所调用的函数。</td></tr><tr><td align="left">readyState</td><td align="left">保存了 XMLHttpRequest 的状态。<br />0: 请求未初始化<br />1: 服务器连接已建立<br />2: 请求已接收<br />3: 正在处理请求<br />4: 请求已完成且响应已就绪</td></tr><tr><td align="left">status</td><td align="left">200: “OK”<br />403: “Forbidden”<br />404: “Page not found”<br />如需完整列表，请访问 <a href="https://www.w3school.com.cn/tags/ref_httpmessages.asp">Http 消息参考手册</a></td></tr><tr><td align="left">statusText</td><td align="left">返回状态文本（例如 “OK” 或 “Not Found”）</td></tr></tbody></table><p>每当 readyState 发生变化时就会调用 onreadystatechange 函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//3`获取响应</span>      xhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">let</span> responseText <span class="token operator">=</span> xhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>responseText<span class="token operator">==</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token comment">//用户名存在</span>                  <span class="token comment">//显示提示</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"userExit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  <span class="token comment">//用户名不存在</span>                  <span class="token comment">//不显示提示</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"userExit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gyka1lbdr6j31ea09fjut.jpg"></p></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userExit<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>用户名已存在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onblur</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> username<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment">//1`创建核心对象</span>        <span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// code for IE6, IE5</span>            xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2`向服务器发送请求</span>        xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost:8080/AJAX/demoServlet?username="</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3`获取响应</span>        xhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> responseText <span class="token operator">=</span> xhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>responseText<span class="token operator">==</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//用户名存在</span>                    <span class="token comment">//显示提示</span>                    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"userExit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//用户名不存在</span>                    <span class="token comment">//不显示提示</span>                    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"userExit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>Axios对原生的Ajax进行封装，简化书写</p><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>axios(js对象).then(回调函数)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1`发送get请求</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span><span class="token string">"http://localhost:8080/AJAX/axiosdemo?username=zs"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//2`发送post请求</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"/axiosdemo"</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token string">"username=zs"</span><span class="token punctuation">,</span>    baseURL<span class="token operator">:</span><span class="token string">"http://localhost:8080/AJAX"</span><span class="token comment">//会自动加载url前面</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h4><p>为方便起见，为所有支持的请求方法提供了别名</p><p>在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</p><p><strong>get请求</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/AJAX/axiosdemo?username=zs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get请求也可以这样写参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/AJAX/axiosdemo"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    params<span class="token operator">:</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">"zs"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>post请求</strong></p><pre class="line-numbers language-none"><code class="language-none">axios.post(&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;AJAX&#x2F;axiosdemo&quot;,&#123;    username:&quot;zs&quot;&#125;).then(    function (res)&#123;        document.getElementById(&quot;content&quot;).innerHTML&#x3D;res.data;    &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON: <strong>JavaScript Object Notation</strong>(JavaScript 对象表示法)</p><p>JSON 是存储和交换文本信息的语法，类似 XML。</p><p>JSON 比 XML 更小、更快，更易解析。</p><p><img src="http://tva1.sinaimg.cn/large/008rg7orgy1gylgy7n5xbj307u0cyq40.jpg"></p><h3 id="JSON数据和JAVA对象转换"><a href="#JSON数据和JAVA对象转换" class="headerlink" title="JSON数据和JAVA对象转换"></a>JSON数据和JAVA对象转换</h3><p>请求数据：JSON字符串—&gt;JAVA对象</p><p>响应数据：JAVA对象—&gt;JSON字符串</p><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li><p>导入坐标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.79<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>JAVA对象–&gt;JSON</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;"age":18,"name":"张三","sub":["语文","英语"]&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>JSON–&gt;JAVA对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">"&#123;\"age\":19,\"name\":\"李四\",\"sub\":[\"语文\",\"英语\"]&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Ajax </tag>
            
            <tag> Axios </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP笔记</title>
      <link href="/2022/01/18/jsp/"/>
      <url>/2022/01/18/jsp/</url>
      
        <content type="html"><![CDATA[<p><strong>PS</strong>：还是Ajax+Servlet+html好用</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java Server Pages，Java的服务端页面</p><p>这是一种动态的网页技术，既可以定义html、css等静态的内容，也可以使用Java代码的动态内容</p><p>简单来说，jsp=java+html</p><p>作用：</p><p>简化开发，避免了在Servlet中直接输出html内容</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>导入坐标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建jsp文件</p></li><li><p>编写代码</p></li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>JSP本质上是一个Servlet</p><p>浏览器访问jsp页面—&gt;tomcat会将name.jsp转换为name_jsp.java的Servlet文件—&gt;tomcat再将文件转换到name_jsp.class文件</p><p>最后执行class字节码文件，提供服务</p><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gyhnpzj1t4j31670jsqga.jpg"></p><p><code>public final class hello_jsp extends org.apache.jasper.runtime.HttpJspBase</code></p><p>可以看到这个java文件是继承自org.apache.jasper.runtime.HttpJspBase这个类的</p><p>在tomcat的源码中找到这个类</p><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gyho2z324oj30r90fldmn.jpg"></p><p>发现是继承HttpServlet的，所以jsp本质是一个Servlet</p><p>在这个java文件中实际还是将标签在输出流中输出</p><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gyhuojqpcaj30p20ezdo5.jpg"></p><h2 id="Jsp脚本"><a href="#Jsp脚本" class="headerlink" title="Jsp脚本"></a>Jsp脚本</h2><p>JSP 脚本有如下三个分类：</p><p> &lt;%…%&gt;：内容会直接放到_jspService()方法之中 </p><p>&lt;%=…%&gt;：内容会放到out.print()中，作为out.print()的参数 </p><p>&lt;%!…%&gt;：内容会放到_jspService()方法之外，被类直接包含</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import&#x3D;&quot;java.util.List&quot; %&gt;&lt;%@ page import&#x3D;&quot;java.util.ArrayList&quot; %&gt;&lt;%@ page import&#x3D;&quot;POJO.Brand&quot; %&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;%    &#x2F;&#x2F; 查询数据库,这里用的假数据    List&lt;Brand&gt; brands &#x3D; new ArrayList&lt;Brand&gt;();    brands.add(new Brand(1,&quot;三只松鼠&quot;,&quot;三只松鼠&quot;,100,&quot;三只松鼠，好吃不上火&quot;,1));    brands.add(new Brand(2,&quot;优衣库&quot;,&quot;优衣库&quot;,200,&quot;优衣库，服适人生&quot;,0));    brands.add(new Brand(3,&quot;小米&quot;,&quot;小米科技有限公司&quot;,1000,&quot;为发烧而生&quot;,1));%&gt;&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;新增&quot;&gt;&lt;br&gt;&lt;hr&gt;&lt;table border&#x3D;&quot;1&quot; cellspacing&#x3D;&quot;0&quot; width&#x3D;&quot;800&quot;&gt;    &lt;tr&gt;        &lt;th&gt;序号&lt;&#x2F;th&gt;        &lt;th&gt;品牌名称&lt;&#x2F;th&gt;        &lt;th&gt;企业名称&lt;&#x2F;th&gt;        &lt;th&gt;排序&lt;&#x2F;th&gt;        &lt;th&gt;品牌介绍&lt;&#x2F;th&gt;        &lt;th&gt;状态&lt;&#x2F;th&gt;        &lt;th&gt;操作&lt;&#x2F;th&gt;    &lt;&#x2F;tr&gt;&lt;%--这里的循环和判断可以截断来写，在最后转换的java文件中会拼接成完整的代码--%&gt;    &lt;%        for (int i &#x3D; 0; i &lt; brands.size(); i++) &#123;            Brand brand &#x3D; brands.get(i);    %&gt;    &lt;tr align&#x3D;&quot;center&quot;&gt;        &lt;td&gt;&lt;%&#x3D;brand.getId()%&gt;&lt;&#x2F;td&gt;        &lt;td&gt;&lt;%&#x3D;brand.getBrandName()%&gt;&lt;&#x2F;td&gt;        &lt;td&gt;&lt;%&#x3D;brand.getCompanyName()%&gt;&lt;&#x2F;td&gt;        &lt;td&gt;&lt;%&#x3D;brand.getOrdered()%&gt;&lt;&#x2F;td&gt;        &lt;td&gt;&lt;%&#x3D;brand.getDescription()%&gt;&lt;&#x2F;td&gt;        &lt;%            if(brand.getStatus() &#x3D;&#x3D; 1)&#123;                &#x2F;&#x2F;显示启用        %&gt;            &lt;td&gt;&lt;%&#x3D;&quot;启用&quot;%&gt;&lt;&#x2F;td&gt;        &lt;%            &#125;else &#123;                &#x2F;&#x2F; 显示禁用        %&gt;            &lt;td&gt;&lt;%&#x3D;&quot;禁用&quot;%&gt;&lt;&#x2F;td&gt;        &lt;%            &#125;        %&gt;        &lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;修改&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;#&quot;&gt;删除&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;    &lt;%        &#125;    %&gt;&lt;&#x2F;table&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>书写麻烦</p><p>阅读麻烦等</p><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gyhynansv3j30ts06udk6.jpg"></p><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>EL（全称Expression Language ）表达式语言，用于简化 JSP 页面内的 Java 代码。</p><p> EL 表达式的主要作用是 获取数据。其实就是从域对象中获取数据，然后将数据展示在页面上。</p><p> 而 EL 表达式的语法也比较简单，<code>$&#123;expression&#125;</code> 。例如：${brands} 就是获取域中存储的 key 为 brands 的数据。</p><h3 id="域对象"><a href="#域对象" class="headerlink" title="域对象"></a>域对象</h3><p>JavaWeb中有四大域对象，分别是： </p><p>page：当前页面有效 </p><p>request：当前请求有效 </p><p>session：当前会话有效 </p><p>application：当前应用有效 </p><p>el 表达式获取数据，会依次从这4个域中寻找，直到找到为止。而这四个域对象的作用范围如下图所示</p><p><img src="http://tva1.sinaimg.cn/large/008rg7orgy1gyhz7dx3esj30bu08labh.jpg"></p><p>如：${brands}，el 表达式获取数据，会先从page域对象中获取数据，如果没有再到 requet 域对象中获取数据，如果再 没有再到 session 域对象中获取，如果还没有才会到 application 中获取数据。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>定义servlet，在 servlet 中封装一些数据并存储到 request 域对象中并转发到jsp页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">Servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token class-name">POJO<span class="token punctuation">.</span>Brand</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"demo1"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/demo1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> demo1 <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 查询数据库,这里用的假数据</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">></span></span> brands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"三只松鼠"</span><span class="token punctuation">,</span><span class="token string">"三只松鼠"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"三只松鼠，好吃不上火"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"优衣库"</span><span class="token punctuation">,</span><span class="token string">"优衣库"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"优衣库，服适人生"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"小米"</span><span class="token punctuation">,</span><span class="token string">"小米科技有限公司"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"为发烧而生"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存储到域中</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"brands"</span><span class="token punctuation">,</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"demo.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在jsp中通过 EL表达式 获取数据</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--  Created by IntelliJ IDEA.  User: Li  Date: 2022&#x2F;1&#x2F;18  Time: 18:03  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h1&gt;demo.jsp&lt;&#x2F;h1&gt;$&#123;brands&#125;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>JSP标准标签库(Jsp Standarded Tag Library) ，使用标签取代JSP页面上的Java代码。</p><p>一般会使用EL表达式获取数据，JSTL展示数据</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>JSTL提供了很多的标签</p><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gyhzu6g2wcj30u80l810v.jpg"></p><p>导入坐标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入JSTL标签库</p><p>在jsp页面中引入</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里记下循环的使用</p><p><strong>第一种</strong></p><p>类似于 Java 中的增强for循环。</p><p>涉及到的  中的属性如下 </p><p>items：被遍历的容器 </p><p>var：遍历产生的临时变量 </p><p>varStatus：遍历状态对象  这个对象有两个属性：index（从0开始）和count（从1开始）</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:forEach items&#x3D;&quot;$&#123;brands&#125;&quot; var&#x3D;&quot;brand&quot; varStatus&#x3D;&quot;id&quot;&gt;&lt;tr align&#x3D;&quot;center&quot;&gt;&lt;%--    &lt;td&gt;$&#123;brand.id&#125;&lt;&#x2F;td&gt;--%&gt;    &lt;td&gt;$&#123;id.count&#125;&lt;&#x2F;td&gt;    &lt;td&gt;$&#123;brand.brandName&#125;&lt;&#x2F;td&gt;    &lt;td&gt;$&#123;brand.companyName&#125;&lt;&#x2F;td&gt;    &lt;td&gt;$&#123;brand.description&#125;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;c:forEach&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二种</strong></p><p>类似于 Java 中的普通for循环。涉及到的  中的属性如下 </p><p>begin：开始数 </p><p>end：结束数 </p><p>step：步长</p><p>从0循环到10，变量名是 i ，每次自增1</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;c:forEach begin&#x3D;&quot;0&quot; end&#x3D;&quot;10&quot; step&#x3D;&quot;1&quot; var&#x3D;&quot;i&quot;&gt;    $&#123;i&#125;&lt;&#x2F;c:forEach&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis快速入门</title>
      <link href="/2021/12/23/mybatis-kuai-su-ru-men/"/>
      <url>/2021/12/23/mybatis-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​    MyBatis 是支持普通 SQL查询，<a href="">存储过程</a>和高级映射的优秀<a href="">持久层</a>框架。MyBatis 消除了几乎所有的<a href="">JDBC</a>代码和参数的手工设置以及<a href="">结果集</a>的检索。MyBatis 使用简单的 <a href="">XML</a>或<a href="">注解</a>用于<a href="">配置</a>和<a href="">原始映射</a>，将接口和 Java 的POJOs（Plain Ordinary Java Objects，普通的 Java对象）映射成数据库中的记录。</p><details ><summary> 相关介绍 </summary>              <div class='content'>              <ul><li><p>​    持久层  </p><p>javaEE的三层架构：表现层、业务层、持久层</p><p>负责将数据保存到数据库的那一层代码</p></li></ul>              </div>            </details><h3 id="Mybatis的简化"><a href="#Mybatis的简化" class="headerlink" title="Mybatis的简化"></a>Mybatis的简化</h3><p><a href=""><strong>硬编码-&gt;配置文件</strong></a></p><div class="tabs" id="tabs1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs1-1">注册驱动，获取连接</button></li><li class="tab"><button type="button" data-href="#tabs1-2">mybatis-config.xml核心配置文件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs1-1"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">"jdbc:mysql:///mybatis?useSSL=false"</span><span class="token punctuation">;</span><span class="token class-name">String</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span><span class="token class-name">String</span> password<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> conn<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span><span class="token punctuation">)</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-2"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    类型别名--></span><span class="token comment">&lt;!--    &lt;typeAliases>--></span><span class="token comment">&lt;!--        &lt;typeAlias type="com.mybatis.pojo.User" alias="User">&lt;/typeAlias>--></span><span class="token comment">&lt;!--    &lt;/typeAliases>--></span>    <span class="token comment">&lt;!-- 包扫描的方式 自动扫描包中的po类，自动定义别名，别名是类名  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatis.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///mybatis?useSSL=false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        加载sql映射文件--></span><span class="token comment">&lt;!--        &lt;mapper resource="com/mybatis/mapper/UserMapper.xml"/>--></span><span class="token comment">&lt;!--        包扫描，可以不用写路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="tabs2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs2-1">SQL语句</button></li><li class="tab"><button type="button" data-href="#tabs2-2">SQL映射文件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs2-1"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"update tb_user set age=? where id=?"</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs2-2"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *    from tb_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><strong><a href="">操作繁琐-&gt;自动完成</a></strong></p><div class="tabs" id="tabs3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs3-1">手动设置参数</button></li><li class="tab"><button type="button" data-href="#tabs3-2">手动封装结果集</button></li><li class="tab"><button type="button" data-href="#tabs3-3">sqlSession对象</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs3-1"><pre class="line-numbers language-java" data-language="java"><code class="language-java">preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token operator">=</span>preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs3-2"><p>例如封装查询User表的信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Result</span> rs<span class="token operator">=</span>preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span>users<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setid</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setname</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs3-3"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取Sqlsession对象，执行sql</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span><span class="token class-name">SessionFactory</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行sql</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.mybatis.mapper.UserMapper.selectAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><strong>Mybatis几乎免除了所有的JDBC代码以及设置参数和获取结果集的工作</strong></p><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><p>创建模块，导入mybatis坐标</p></li><li><p>编写Mybatis的核心配置文件-&gt;替换连接信息，解决硬编码问题</p></li><li><p>定义POJO类</p></li><li><p>编写SQL映射文件-&gt;统一管理SQL语句，也是解决硬编码问题</p></li><li><p>业务层使用</p><ol><li><p>加载核心配置文件，获取SqlSessionFactory对象</p></li><li><p>获取Session对象，执行SQL</p></li><li><p>释放资源</p></li></ol></li></ol><div class="tabs" id="tabs4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs4-1">导入坐标</button></li><li class="tab"><button type="button" data-href="#tabs4-2">编写Mybatis的核心配置文件</button></li><li class="tab"><button type="button" data-href="#tabs4-3">定义POJO类</button></li><li class="tab"><button type="button" data-href="#tabs4-4">编写SQL映射文件</button></li><li class="tab"><button type="button" data-href="#tabs4-5">业务层使用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs4-1"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs4-2"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 包扫描--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatis.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///mybatis?useSSL=false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        加载sql映射文件--></span><span class="token comment">&lt;!--        &lt;mapper resource="com/mybatis/mapper/UserMapper.xml"/>--></span><span class="token comment">&lt;!--        包扫描，可以不用写路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs4-3"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> _age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> _age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set_age</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> _age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> _age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", _age="</span> <span class="token operator">+</span> _age <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs4-4"><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gxr4jgkzuzj30z50f445l.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs4-5"><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gxr4l6usp1j314s0gagwx.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Mapper代理"><a href="#Mapper代理" class="headerlink" title="Mapper代理"></a>Mapper代理</h2><p><code>问题：</code></p><p>在业务层使用的时候，使用sql的映射是使用namespace.id的方式，这里还是有硬编码的问题</p><p>而且使用的时候还需要去查看相关的sql映射id，并不是很方便</p><p><code>解决：</code></p><p>Mapper代理</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>定义与SQL映射文件同名的Mapper接口，两者要在同一目录下</li><li>SQL映射文件的namespace要为Mapper接口的全限定名</li><li>Mapper接口中定义方法，方法名为sql的id，保持参数类型和返回值相同</li><li>业务层编码<ol><li>SqlSession的getMapper方法获取Mapper接口的代理对象</li><li>代理对象调用方法完成sql</li></ol></li></ol><p>Mapper和SQL的映射文件在同一目录下，并且同名，则在mybatis的核心文件中加载SQL映射文件的时候可以使用包扫描的方式</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="tabs" id="tabs5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs5-1">设置同名接口</button></li><li class="tab"><button type="button" data-href="#tabs5-2">Mapper接口</button></li><li class="tab"><button type="button" data-href="#tabs5-3">业务层使用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs5-1"><p>resource下建多级目录xxx/xxx/xxx不能用xxx.xxx.xxx，创建与Mapper接口同路径，编译时会将两者放到一起</p><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gxr4mmiagaj30z30ep7db.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs5-2"><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gxr4nprayij30qv0bm793.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs5-3"><p><img src="https://image.baidu.com/search/down?url=http://tva1.sinaimg.cn/large/008rg7orgy1gxr4oeb5uzj31380eywol.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="SQL映射文件"><a href="#SQL映射文件" class="headerlink" title="SQL映射文件"></a>SQL映射文件</h2><h3 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符:"></a>参数占位符:</h3><ol><li><p>#{}、${}</p><ol><li> #{}: 执行SQL时,会将#{}占位符替换为?,将来自动设置参数值   预编译</li></ol><p>   ${}: 拼SQL。 会存在SQL注入问题</p><ol start="2"><li><p>使用时机: </p><ul><li>参数传递，都使用#{}</li><li>如果要对表名、列名进行动态设置，只能使用${}进行sql拼接。</li></ul></li></ol></li><li><p>parameterType:</p><p>对于有参数的mapper接口方法，我们在映射配置文件中应该配置 ParameterType 来指定参数类型。只不过该属性都可以 省略</p><p>用于设置参数类型，该参数可以省略,一般不写，在接口方法中有定义</p></li><li><p>SQL语句中特殊字符处理:</p><ul><li>​    转义字符</li><li><code>&lt;![CDATA[内容]1&gt;</code>      (如&lt;)</li></ul></li></ol><h3 id="字段映射"><a href="#字段映射" class="headerlink" title="字段映射"></a>字段映射</h3><p>有时候POJO类的字段名和数据库的字段名不一样，查询到的数据不能封装到实体类里面(会赋值为属性类型的默认值)，所以在查询的时候需要做一个字段的映射</p><p><code>mapper接口中的映射方法参数对应的的是SQL语句的参数，这里数据类型的对应没有那么严格，SQL的结果封装对应的是resultType类型，如果要封装为POJO对象，则要求要字段一一对应</code></p><div class="tabs" id="tabs6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs6-1">sql语句中映射</button></li><li class="tab"><button type="button" data-href="#tabs6-2">sql片段</button></li><li class="tab"><button type="button" data-href="#tabs6-3">resultMap映射</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs6-1"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,name,age as _age        from tb_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs6-2"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">sql片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    id,name,age as _age<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        from tb_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs6-3"><ul><li>type：返回类型</li><li>column：列名</li><li>property：字段名</li><li>select中的resultType要换成resultMap属性</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ageMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByid<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ageMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user where id <span class="token cdata">&lt;![CDATA[        &lt;        ]]></span>#&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>当查询语句中的参数多的时候，就需要方法参数映射的方式传入SQL语句中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    多条件查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectCD<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ageMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *    from tb_user where name like #&#123;name&#125; and age like #&#123;age&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多条件"><a href="#多条件" class="headerlink" title="多条件"></a>多条件</h3><p>@Param(“SQL参数占位符名称”) 参数名</p><div class="tabs" id="tabs6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs6-1">UserMapper接口</button></li><li class="tab"><button type="button" data-href="#tabs6-2">测试类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs6-1"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectCD</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name1<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> age1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs6-2"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"李"</span><span class="token punctuation">;</span><span class="token class-name">String</span> age<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span>name<span class="token operator">=</span><span class="token string">"%"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">;</span>age<span class="token operator">=</span><span class="token string">"%"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectCD</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="对象封装"><a href="#对象封装" class="headerlink" title="对象封装"></a>对象封装</h3><p>接口方法名（参数对象）;</p><p>参数对象的属性名要与SQL的字段对应，如#｛name｝，会去找 参数对象.name，所以也需要getter和setter方法，<em>方法名没有严格要求，但一定要有返回对应字段。</em></p><div class="tabs" id="tabs6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs6-1">UserMapper接口</button></li><li class="tab"><button type="button" data-href="#tabs6-2">测试类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs6-1"><p>SUser是age为String的类，这里是为了强调可以不用SQL返回结果的POJO类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectCD</span><span class="token punctuation">(</span><span class="token class-name">SUser</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs6-2"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SUser</span> su<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>su<span class="token punctuation">.</span><span class="token function">setge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>su<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>。。。。。。。。。。。    。。。。。。<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectCD</span><span class="token punctuation">(</span>su<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>会将Map集合里面的Key值对应的Value值映射到SQL对应字段</p><div class="tabs" id="tabs7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs7-1">UserMapper接口</button></li><li class="tab"><button type="button" data-href="#tabs7-2">测试类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs7-1"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectCD</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs7-2"><pre class="line-numbers language-none"><code class="language-none">HashMap&lt;String, String&gt; Map &#x3D; new HashMap&lt;String,String&gt;();Map.put(&quot;name&quot;,&quot;%李%&quot;);Map.put(&quot;age&quot;,&quot;%1%&quot;);.........................................List&lt;User&gt; users &#x3D; mapper.selectCD(Map);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="动态条件查询"><a href="#动态条件查询" class="headerlink" title="动态条件查询"></a>动态条件查询</h3><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>有时候条件输入并不是都输入，这个时候需要缺少参数的多条件SQL语句也能执行</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><h4 id="多条件-动态查询"><a href="#多条件-动态查询" class="headerlink" title="多条件-动态查询"></a>多条件-动态查询</h4><div class="tabs" id="动态条件查询"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#动态条件查询-1">sql映射</button></li><li class="tab"><button type="button" data-href="#动态条件查询-2">UserMapper接口</button></li><li class="tab"><button type="button" data-href="#动态条件查询-3">测试类</button></li><li class="tab"><button type="button" data-href="#动态条件查询-4">结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="动态条件查询-1"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    动态查询-多条件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dycon_Mul<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ageMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *        from tb_user        where              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name !=<span class="token punctuation">'</span><span class="token punctuation">'</span> and name!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  name=#&#123;name&#125;              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=<span class="token punctuation">'</span><span class="token punctuation">'</span> and age!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  and age=#&#123;age&#125;              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态条件查询-2"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//     多条件动态</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token class-name">Dycon_Mul</span><span class="token punctuation">(</span><span class="token class-name">SUser</span> su<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态条件查询-3"><pre class="line-numbers language-none"><code class="language-none">import com.mybatis.mapper.UserMapper;import com.mybatis.pojo.SUser;import com.mybatis.pojo.User;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;import java.util.List;public class Dycon_Multest &#123;    public static void main(String[] args) throws IOException &#123;        String s &#x3D; &quot;mybatis-config.xml&quot;;        InputStream resourceAsStream &#x3D; Resources.getResourceAsStream(s);        SqlSessionFactory build &#x3D; new SqlSessionFactoryBuilder().build(resourceAsStream);        SqlSession sqlSession &#x3D; build.openSession();        UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);        SUser su &#x3D; new SUser();        su.setName(&quot;zs&quot;);&#x2F;&#x2F;不输入age参数&#x2F;&#x2F;        su.setge(&quot;20&quot;);        List&lt;User&gt; users &#x3D; mapper.Dycon_Mul(su);        for(User u :users)&#123;            System.out.println(u);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态条件查询-4"><p>可以看到name没有在sql语句中</p><pre class="line-numbers language-none"><code class="language-none">[DEBUG]  [main] c.m.m.U.Dycon_Mul - &#x3D;&#x3D;&gt;  Preparing: select * from tb_user where name&#x3D;? [DEBUG]  [main] c.m.m.U.Dycon_Mul - &#x3D;&#x3D;&gt; Parameters: zs(String) [DEBUG]  [main] c.m.m.U.Dycon_Mul - &lt;&#x3D;&#x3D;      Total: 2 User&#123;id&#x3D;6, name&#x3D;&#39;zs&#39;, _age&#x3D;20&#125;User&#123;id&#x3D;7, name&#x3D;&#39;zs&#39;, _age&#x3D;21&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>但是可以发现这个sql写法有一个缺陷，就是当第一个参数省略时，拼接的sql是不合法的</p><!--tab 测试类--><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dycon_Multest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSessionFactory</span> build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> build<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SUser</span> su <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略名字</span><span class="token comment">//        su.setName("zs");</span>        su<span class="token punctuation">.</span><span class="token function">setge</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">mapper<span class="token punctuation">.</span></span>Dycon_Mul</span><span class="token punctuation">(</span>su<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">User</span> u <span class="token operator">:</span>users<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!--endtab--><!--tab 结果--><p>可以看到sql语句为<code>select * from tb_user where and age=?</code>，这是不合法的</p><pre class="line-numbers language-none"><code class="language-none">[DEBUG]  [main] c.m.m.U.Dycon_Mul - &#x3D;&#x3D;&gt;  Preparing: select * from tb_user where and age&#x3D;? [DEBUG]  [main] c.m.m.U.Dycon_Mul - &#x3D;&#x3D;&gt; Parameters: 20(String) Exception in thread &quot;main&quot; org.apache.ibatis.exceptions.PersistenceException: ### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;and age&#x3D;&#39;20&#39;&#39; at line 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><!--endtab--><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>应该要想办法将拼接的sql语句变成合法</p><p>1、恒等式让所有条件格式都一样</p><div class="tabs" id="fangan1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fangan1-1">sql映射文件</button></li><li class="tab"><button type="button" data-href="#fangan1-2">结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fangan1-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--    动态查询-多条件--&gt;    &lt;select id&#x3D;&quot;Dycon_Mul&quot; resultMap&#x3D;&quot;ageMap&quot;&gt;        select *        from tb_user        where 1&#x3D;1              &lt;if test&#x3D;&quot;name !&#x3D;&#39;&#39; and name!&#x3D;null&quot;&gt;                 and name&#x3D;#&#123;name&#125;              &lt;&#x2F;if&gt;              &lt;if test&#x3D;&quot;age!&#x3D;&#39;&#39; and age!&#x3D;null&quot;&gt;                  and age&#x3D;#&#123;age&#125;              &lt;&#x2F;if&gt;    &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fangan1-2"><p>select * from tb_user where 1=1 and age=? </p><pre class="line-numbers language-none"><code class="language-none">[DEBUG]  [main] c.m.m.U.Dycon_Mul - &#x3D;&#x3D;&gt;  Preparing: select * from tb_user where 1&#x3D;1 and age&#x3D;? [DEBUG]  [main] c.m.m.U.Dycon_Mul - &#x3D;&#x3D;&gt; Parameters: 20(String) [DEBUG]  [main] c.m.m.U.Dycon_Mul - &lt;&#x3D;&#x3D;      Total: 1 User&#123;id&#x3D;6, name&#x3D;&#39;zs&#39;, _age&#x3D;20&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2、<code>&lt;where&gt;</code>标签替换where</p><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><div class="tabs" id="fangan2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fangan2-1">sql映射文件</button></li><li class="tab"><button type="button" data-href="#fangan2-2">结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fangan2-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--    动态查询-多条件--&gt;    &lt;select id&#x3D;&quot;Dycon_Mul&quot; resultMap&#x3D;&quot;ageMap&quot;&gt;        select *        from tb_user        &lt;where&gt;            &lt;if test&#x3D;&quot;name !&#x3D;&#39;&#39; and name!&#x3D;null&quot;&gt;                and name&#x3D;#&#123;name&#125;            &lt;&#x2F;if&gt;            &lt;if test&#x3D;&quot;age!&#x3D;&#39;&#39; and age!&#x3D;null&quot;&gt;                and age&#x3D;#&#123;age&#125;            &lt;&#x2F;if&gt;        &lt;&#x2F;where&gt;    &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fangan2-2"><p>可以看到where自动省略了name</p><p>select * from tb_user WHERE age=?</p><pre class="line-numbers language-none"><code class="language-none">[DEBUG]  [main] c.m.m.U.Dycon_Mul - &#x3D;&#x3D;&gt;  Preparing: select * from tb_user WHERE age&#x3D;? [DEBUG]  [main] c.m.m.U.Dycon_Mul - &#x3D;&#x3D;&gt; Parameters: 20(String) [DEBUG]  [main] c.m.m.U.Dycon_Mul - &lt;&#x3D;&#x3D;      Total: 1 User&#123;id&#x3D;6, name&#x3D;&#39;zs&#39;, _age&#x3D;20&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="单条件-动态查询"><a href="#单条件-动态查询" class="headerlink" title="单条件-动态查询"></a>单条件-动态查询</h4><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><div class="tabs" id="single"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#single-1">sql语句</button></li><li class="tab"><button type="button" data-href="#single-2">测试类</button></li><li class="tab"><button type="button" data-href="#single-3">结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="single-1"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    单条件查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dycon_Sin<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user        where        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name !=<span class="token punctuation">'</span><span class="token punctuation">'</span> and name!= null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                name = #&#123;name&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=<span class="token punctuation">'</span><span class="token punctuation">'</span>and age!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                age=#&#123;age&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="single-2"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dycon_Sintest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSessionFactory</span> build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> build<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SUser</span> su<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里设置了两个参数</span>        su<span class="token punctuation">.</span><span class="token function">setge</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        su<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">mapper<span class="token punctuation">.</span></span>Dycon_Sin</span><span class="token punctuation">(</span>su<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">User</span> u <span class="token operator">:</span>users<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="single-3"><p>select * from tb_user where name = ?</p><p>可以看到只用了SQL语句中的第一个参数</p><pre class="line-numbers language-none"><code class="language-none">[DEBUG]  [main] c.m.m.U.Dycon_Sin - &#x3D;&#x3D;&gt;  Preparing: select * from tb_user where name &#x3D; ? [DEBUG]  [main] c.m.m.U.Dycon_Sin - &#x3D;&#x3D;&gt; Parameters: zs(String) [DEBUG]  [main] c.m.m.U.Dycon_Sin - &lt;&#x3D;&#x3D;      Total: 2 User&#123;id&#x3D;6, name&#x3D;&#39;zs&#39;, _age&#x3D;null&#125;User&#123;id&#x3D;7, name&#x3D;&#39;zs&#39;, _age&#x3D;null&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h5><p>当没有输入值时，就会出现SQL语句不合法的情况，比如<code>select * from tb_user where</code>，所以需要一个default的情况</p><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><p>1、<code>&lt;otherwise&gt;</code>标签</p><p>例如：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    单条件查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dycon_Sin<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ageMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user        where        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name !=<span class="token punctuation">'</span><span class="token punctuation">'</span> and name!= null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                name = #&#123;name&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=<span class="token punctuation">'</span><span class="token punctuation">'</span>and age!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                age=#&#123;age&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                1=1            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    那么产生的SQL语句为<code>select * from tb_user where 1=1</code> ，就可以避免报错</p><p>2、<code>&lt;where&gt;</code>标签</p><p>像上面的otherwise情况，只是为了SQL语句合法而写的</p><p>使用where标签可以省略otherwise部分</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    单条件查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dycon_Sin<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ageMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name !=<span class="token punctuation">'</span><span class="token punctuation">'</span> and name!= null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    name = #&#123;name&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=<span class="token punctuation">'</span><span class="token punctuation">'</span>and age!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    age=#&#123;age&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p>会自动把SQL语句中的where去除，保证语句的合法</p><p>select * from tb_use</p><pre class="line-numbers language-none"><code class="language-none">[DEBUG]  [main] c.m.m.U.Dycon_Sin - &#x3D;&#x3D;&gt;  Preparing: select * from tb_user [DEBUG]  [main] c.m.m.U.Dycon_Sin - &#x3D;&#x3D;&gt; Parameters:  [DEBUG]  [main] c.m.m.U.Dycon_Sin - &lt;&#x3D;&#x3D;      Total: 7 User&#123;id&#x3D;1, name&#x3D;&#39;zhangsan&#39;, _age&#x3D;22&#125;User&#123;id&#x3D;2, name&#x3D;&#39;lisi&#39;, _age&#x3D;26&#125;User&#123;id&#x3D;3, name&#x3D;&#39;wangwu&#39;, _age&#x3D;17&#125;User&#123;id&#x3D;4, name&#x3D;&#39;李四&#39;, _age&#x3D;19&#125;User&#123;id&#x3D;5, name&#x3D;&#39;李三&#39;, _age&#x3D;18&#125;User&#123;id&#x3D;6, name&#x3D;&#39;zs&#39;, _age&#x3D;20&#125;User&#123;id&#x3D;7, name&#x3D;&#39;zs&#39;, _age&#x3D;21&#125;Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 持久层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2021/12/19/git-chang-yong-ming-ling/"/>
      <url>/2021/12/19/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th align="left">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">git config –global user.name 用户名</td><td align="center">设置用户签名</td></tr><tr><td align="left">git config –global user.email 邮箱</td><td align="center">设置用户签名</td></tr><tr><td align="left">git init</td><td align="center">初始化本地库</td></tr><tr><td align="left">git status</td><td align="center">查看本地库状态</td></tr><tr><td align="left">git add 文件名</td><td align="center">添加到暂存区</td></tr><tr><td align="left">git commit -m “日志信息” 文件名</td><td align="center">提交到本地库</td></tr><tr><td align="left">git reflog</td><td align="center">查看历史记录</td></tr><tr><td align="left">git log</td><td align="center">查询版本的历史</td></tr><tr><td align="left">git reset –hard 版本号</td><td align="center">更改版本</td></tr><tr><td align="left">ll</td><td align="center">列出当前文件或目录的详细信息</td></tr><tr><td align="left">vim “文件名”</td><td align="center">打开或添加文件（<kbd>ESC</kbd>退出编辑 ）:wq保存</td></tr><tr><td align="left">cat “文件名”</td><td align="center">查看文件内容</td></tr></tbody></table><p>​    签名的作用是<code>区分不同操作者身份</code>。用户的签名信息在每一个版本的提交信息中能够看 到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。</p><p>​    这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任 何关系。</p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><table><thead><tr><th>分支操作</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr><tr><td></td><td></td></tr></tbody></table><p>​    <code>分支冲突</code>：</p><p>​    合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改（同一时间段）。Git 无法替 我们决定使用哪一个。必须人为决定新代码内容。</p><p>​    <code>表现</code>：</p><p>​     <img src="https://s4.ax1x.com/2021/12/19/Tewj1A.png"></p><p>​    编辑有冲突的文件，删除特殊符号，决定要使用的内容 </p><p>​    <code>冲突区域</code>：</p><p>​    &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD </p><p>​        当前分支的代码</p><p>​    ======= </p><p>​    合并过来的代码 </p><p>​    &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix(分支名)</p><p>​    最后提交时，此时使用 git commit 命令时<strong>不能带文件名</strong></p><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><table><thead><tr><th>远程仓库操作</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送<strong>本地</strong>分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 <strong>远程分支名</strong></td><td>将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td></tr></tbody></table><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        Git 是一个免费的、开源的<code>分布式版本控制系统</code>，可以快速高效地处理从小型到大型的各种 项目。 Git 易于学习，占地面积小，性能极快。 </p><p>​        它具有廉价的本地库，方便的暂存区域和多个工作 流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具。</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>​        版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。 </p><p>​        版本控制其实最重要的是<code>可以记录文件修改历史记录</code>，从而让用户能够查看历史版本， 方便版本切换</p><h3 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h3><div class="tabs" id="tabs1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs1-1">集中式版本控制工具</button></li><li class="tab"><button type="button" data-href="#tabs1-2">分布式版本控制工具</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs1-1"><p><strong>CVS、SVN(Subversion)、VSS……</strong></p><p>** <strong>集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存 所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或 者提交更新。多年以来，这已成为版本控制系统的标准做法。 这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什 么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要 远比在各个客户端上维护本地数据库来得轻松容易。 事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕 机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作</strong>**</p><p><img src="https://s4.ax1x.com/2021/12/19/TesXLR.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-2"><p><strong>Git、Mercurial、Bazaar、Darcs……</strong></p><p><strong>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码 仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用 其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次 对整个文件仓库的完整备份。</strong></p><p><strong>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:</strong> </p><ol><li><p><strong>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</strong> </p></li><li><p><strong>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</strong></p><p><img src="https://s4.ax1x.com/2021/12/19/TeyiSe.png"></p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Git工作机制"><a href="#Git工作机制" class="headerlink" title="Git工作机制"></a>Git工作机制</h3><p><img src="https://s4.ax1x.com/2021/12/19/TeyuY8.png"></p><h3 id="Git和代码托管中心"><a href="#Git和代码托管中心" class="headerlink" title="Git和代码托管中心"></a>Git和代码托管中心</h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。</p><div class="tabs" id="tabs2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs2-1">局域网</button></li><li class="tab"><button type="button" data-href="#tabs2-2">局域网</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs2-1"><ul><li><input disabled="" type="checkbox"> GitLab</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs2-2"><ul><li><p><input checked="" disabled="" type="checkbox">  GitHub（外网）</p></li><li><p><input checked="" disabled="" type="checkbox">  Gitee 码云（国内网站）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h3><p>Git 切换版本，底层其实是移动的 HEAD 指针，具体原理如下图所示。</p><p><img src="https://s4.ax1x.com/2021/12/19/Te6Vc4.png"></p><p><img src="https://s4.ax1x.com/2021/12/19/Te604f.png"></p><h3 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h3><h4 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h4><p>​    在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独 分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时 候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是 一个单独的副本。（分支底层其实也是指针的引用）</p><p>​        <img src="https://s4.ax1x.com/2021/12/19/Te6MAx.png"></p><p>​    <code>好处</code></p><p>​    同时并行推进多个功能开发，提高开发效率。 </p><p>​    各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败 的分支删除重新开始即可。</p><p>​    master、分支其实都是指向具体版本记录的指针。当前所在的分支，其实是由 HEAD 决定的。所以创建分支的本质就是多创建一个指针。</p><p><img src="https://s4.ax1x.com/2021/12/19/Te6I8U.png"></p><p><img src="https://image.baidu.com/search/down?url=https://s4.ax1x.com/2021/12/19/TecMrj.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>appium相关命令</title>
      <link href="/2021/10/29/appium/"/>
      <url>/2021/10/29/appium/</url>
      
        <content type="html"><![CDATA[<h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> appium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> appium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>touch_action <span class="token keyword">import</span> TouchAction<span class="token keyword">import</span> timedesire_cap<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token string">"appActivity"</span><span class="token punctuation">:</span> <span class="token string">".launch.LaunchSplashEduActivity"</span><span class="token punctuation">,</span>  <span class="token string">"appPackage"</span><span class="token punctuation">:</span> <span class="token string">"com.tencent.wework"</span><span class="token punctuation">,</span>  <span class="token string">"platformName"</span><span class="token punctuation">:</span> <span class="token string">"android"</span><span class="token punctuation">,</span>  <span class="token string">"deviceName"</span><span class="token punctuation">:</span> <span class="token string">"emulator-5554"</span><span class="token punctuation">,</span>  <span class="token string">"noReset"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span><span class="token comment">#不对应用reset</span>  <span class="token string">"dontStopAppOnReset"</span><span class="token punctuation">:</span> <span class="token boolean">True</span>   <span class="token string">"unicodeKeyBoard"</span><span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token comment">#切换输入</span>  <span class="token string">"resetKeyBoard"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Remote<span class="token punctuation">(</span><span class="token string">"http://localhost:4723/wd/hub"</span><span class="token punctuation">,</span>desire_cap<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">获取设备名字</button></li><li class="tab"><button type="button" data-href="#test4-2">获取所有的包名</button></li><li class="tab"><button type="button" data-href="#test4-3">获取Activity</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>adb devices</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>adb shell pm list packages</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>adb logcat | grep ActivityManager 或者 adb logcat | grep Displayed</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details ><summary> 图片1 </summary>              <div class='content'>              <p><a href="https://imgtu.com/i/5vahX4"><img src="https://z3.ax1x.com/2021/10/29/5vahX4.png" alt="5vahX4.png"></a></p>              </div>            </details><details ><summary> 图片2 </summary>              <div class='content'>              <p><a href="https://imgtu.com/i/5vabh6"><img src="https://z3.ax1x.com/2021/10/29/5vabh6.png" alt="5vabh6.png"></a></p>              </div>            </details><details ><summary> app信息 </summary>              <div class='content'>              <p><a href="https://imgtu.com/i/5v0G79"><img src="https://z3.ax1x.com/2021/10/29/5v0G79.png" alt="5v0G79.png"></a></p>              </div>            </details><details ><summary> Capability设置 </summary>              <div class='content'>              <p><a href="https://imgtu.com/i/5v0r0H"><img src="https://z3.ax1x.com/2021/10/29/5v0r0H.png" alt="5v0r0H.png"></a></p>              </div>            </details>]]></content>
      
      
      
        <tags>
            
            <tag> appium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置记录</title>
      <link href="/2021/09/23/pei-zhi-ji-lu/"/>
      <url>/2021/09/23/pei-zhi-ji-lu/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="87b525248cd6ce5add26e5fa6fefb80f197b670bec3359a908053086afd6af24"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置信息 </tag>
            
            <tag> configuration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/09/13/hello-world/"/>
      <url>/2021/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>[toc]</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
